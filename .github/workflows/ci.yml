name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ci_db
          POSTGRES_USER: ci_user
          POSTGRES_PASSWORD: ci_pass
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U ci_user -d ci_db"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    env:
      DATABASE_URL: postgres://ci_user:ci_pass@localhost:5432/ci_db
      DJANGO_SECRET_KEY: dummy-ci-key
      DEBUG: "0"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Cache pip
        uses: actions/cache@v4
        with:
            path: ~/.cache/pip
            key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
            restore-keys: pip-${{ runner.os }}-
      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django coverage flake8
      - name: Lint
        run: flake8 .
      - name: Migrate
        run: python manage.py migrate --noinput
      - name: Tests
        run: coverage run -m pytest
      - name: Coverage report
        run: coverage xml
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        run: |
          IMAGE=ghcr.io/${{ github.repository }}:sha-${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE
      - name: Export image tag
        run: echo "IMAGE_TAG=ghcr.io/${{ github.repository }}:sha-${{ github.sha }}" >> $GITHUB_ENV