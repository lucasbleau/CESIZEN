name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ci_db
          POSTGRES_USER: ci_user
          POSTGRES_PASSWORD: ci_pass
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U ci_user -d ci_db"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    env:
      DATABASE_URL: postgres://ci_user:ci_pass@localhost:5432/ci_db
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY || 'dummy-ci-key' }}
      DEBUG: "0"
      PYTHONPATH: cesizen_backend
    steps:
      - uses: actions/checkout@v4
      - name: Show tree
        run: ls -R .
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: cesizen_backend/requirements.txt
      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install -r cesizen_backend/requirements.txt
          pip install pytest pytest-django flake8 coverage
      - name: Migrate
        run: python cesizen_backend/manage.py migrate --noinput
      - name: Lint (non blocking)
        run: flake8 cesizen_backend/api || true
      - name: Tests + coverage
        run: |
          coverage run -m pytest
          coverage xml
      - uses: actions/upload-artifact@v4
        with:
            name: coverage
            path: coverage.xml

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push
        run: |
          IMAGE=ghcr.io/${{ github.repository }}:sha-${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE
          echo "IMAGE_TAG=$IMAGE" >> $GITHUB_ENV